// Generated by CoffeeScript 2.4.1
(function() {
  //#==============================================================================
  // Suger for getter and setter method of CoffeeScript.
  var Line, Time, splitByLine;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  //#==============================================================================
  // 行で分割する。空行は空文字列として残す。
  splitByLine = function(s) {
    if (s.length === 0) {
      return s;
    }
    return s.replace(/\r\n|\n\r|\r/g, '\n').split('\n');
  };

  Line = (function() {
    var newTime, reg;

    //#==============================================================================
    // 入力1行を表す。
    class Line {
      constructor(line) {
        var m;
        m = reg.exec(line);
        if (m != null) {
          this.label = line.substring(0, m.index).trim();
          this.time1 = newTime(m);
          m = reg.exec(line);
          this.time2 = newTime(m);
          while (m != null) {
            m = reg.exec(line);
          }
        } else {
          this.label = line.trim();
          this.time1 = newTime();
          this.time2 = newTime();
        }
      }

      toLine(abs, total) {
        var t1, t2;
        if (this.time1.zero) {
          t1 = '';
          t2 = '';
        } else if (this.time2.zero) {
          ({
            total,
            text: t1
          } = this.time1.addTo(abs, total));
          t2 = '';
        } else {
          ({
            total,
            text: t1
          } = this.time1.addTo('R', total));
          ({
            total,
            text: t2
          } = this.time2.addTo('S', total));
        }
        return {
          total: total,
          time: `${t1}, ${t2}`,
          csv: `"${this.label}", "${t1}", "${t2}"`
        };
      }

    };

    reg = /\b([a-zA-Z]?)(\d+)(:)?(\d{1,2})?/g;

    newTime = function(m) {
      var absolute, minutes;
      absolute = (m != null) && (m[1] != null) ? m[1] : '';
      minutes = (m != null) && (m[2] != null) ? parseInt(m[2]) : 0;
      if ((m != null) && (m[3] != null)) {
        minutes *= 60;
      }
      if ((m != null) && (m[4] != null)) {
        minutes += parseInt(m[4]);
      }
      return new Time(absolute, minutes);
    };

    return Line;

  }).call(this);

  Time = (function() {
    var fromM, z;

    //#==============================================================================
    // 入力のうち、時間部分を表す。
    class Time {
      constructor(absolute1, minutes1) {
        this.absolute = absolute1;
        this.minutes = minutes1;
      }

      addTo(abs, total) {
        if (!!this.absolute) {
          abs = this.absolute;
          total = this.minutes;
        } else {
          total += this.minutes;
        }
        return {
          total: total,
          text: fromM(abs, total)
        };
      }

    };

    Time.property('zero', {
      get: function() {
        return this.minutes === 0;
      }
    });

    fromM = function(abs, m) {
      return `${abs}${z(Math.floor(m / 60))}:${z(m % 60)}`;
    };

    z = function(m) {
      return ("00" + m).slice(-2);
    };

    return Time;

  }).call(this);

  //###############################################################################
  // jQuery 開始
  $(function() {
    var $csv, $input, $time;
    $input = $("#input");
    $time = $("#time");
    $csv = $("#csv");
    $input.on("input", function(e) {
      var csv, csvbuf, i, len, line, lines, linnum, time, timebuf, total;
      total = 0;
      timebuf = [];
      csvbuf = [];
      lines = splitByLine(($(this)).val().trimEnd());
      for (linnum = i = 0, len = lines.length; i < len; linnum = ++i) {
        line = lines[linnum];
        ({total, time, csv} = (new Line(line)).toLine((linnum + 1 < lines.length ? 'P' : 'R'), total));
        timebuf.push(time);
        csvbuf.push(csv);
      }
      $time.val(timebuf.join('\n'));
      return $csv.val(csvbuf.join('\n'));
    });
    return $input.trigger("input");
  });

}).call(this);
